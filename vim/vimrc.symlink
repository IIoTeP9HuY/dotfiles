" Plugins {{{

" To setup vim-plug for neovim just do:
" curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin('~/.vim/plugged')

" Visual-improvement plugins
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'bling/vim-airline'

" Code navigation plugins
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Coding plugins
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'xuhdev/SingleCompile'
Plug 'fatih/vim-go'
Plug 'Konfekt/FastFold'

function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }

" Notes-organizing plugins
Plug 'vimwiki/vimwiki'

" Taskwarrior plugins
if executable('task')
    Plug 'tbabej/taskwiki'
    Plug 'blindFS/vim-taskwarrior'
endif

" Other plugins
Plug 'tpope/vim-fugitive'
Plug 'terryma/vim-multiple-cursors'
Plug 'yssl/QFEnter'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/goyo.vim'

call plug#end()

set rtp+=~/.fzf

" }}}

" Colors {{{

syntax on
syntax enable
colorscheme badwolf

" Vimdiff color scheme
highlight DiffChange cterm=none ctermfg=black ctermbg=LightGreen gui=none guifg=bg guibg=LightGreen
highlight DiffText cterm=none ctermfg=black ctermbg=Red gui=none guifg=bg guibg=Red

" }}}

" Spaces and Tabs {{{

set tabstop=4
set shiftwidth=4
set expandtab       " Replace tabs with spaces
set autoindent
filetype plugin indent on   " Use language-dependent indentation

" }}}

" UI Config {{{

set number                  " Show line numbers
set cursorline              " Highlight current line
set showmatch               " Highlight matching parenthesis

set wildmenu                " Show visual autocomplete menu
set wildmode=longest,list
set wcm=<Tab>

set colorcolumn=100              " Display 100-characters border
set laststatus=2                 " Always display the status line
let g:airline_powerline_fonts=1  " Generate airline fonts

" Highlight spaces and tabs in the end of line
set list listchars=tab:>-,trail:.,precedes:<,extends:>
set list

set splitright     " `:vs filename` will open split on the right

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" }}}

" Shortcuts {{{

let mapleader=","       " Rebind leader from backslash to comma

" Fast search word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><cr>
" Fast search and replace word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
" Speedup copy and paste from global buffer
noremap <Leader>y "+y
vnoremap <Leader>y "+y
noremap <Leader>p "+p
" Save files faster
nnoremap <Leader>w :w<CR>

" Fix alt key usage in OSX terminals
if exists(':tnoremap')
    tnoremap Ã¥ <A-a>
endif

" Switch between panels with <Enter> key
nnoremap <cr> <c-w>w

" Leave insert mode with jj
inoremap jj <ESC>

" Disable autoindenting when pasting large chunk of code
set pastetoggle=<F2>

" Save write-protected file
cmap w!! %!sudo tee > /dev/null %

" Access fzf commands to search across files and buffers
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <leader>b :Buffers<CR>

" Shortcut to open NERDTree drawer
map <silent> <leader>e :NERDTreeToggle<CR>

" Select text that you've just pasted
noremap gV `[v`]

" Disable tmux navigator mappings by default
let g:tmux_navigator_no_mappings = 1

" Add manual tmux navigator mappings
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" }}}

" Search {{{

set incsearch " Search as characters are entered
set hlsearch  " Highlight current matches

" Turn off current highlighting
nnoremap <Leader>c :nohlsearch<CR>

" }}}

" Folding {{{

set foldenable          " Enable folding
set foldmethod=marker   " Fold by marker
set foldnestmax=10      " Open all folds on levels < 10

" Space opens/closes folds
nnoremap <space> za

" Save state of the folds for vimwiki files
autocmd BufWinLeave *.md* mkview
autocmd BufWinEnter *.md* silent! loadview

" Set foldmethod to expr for markdown files
autocmd BufNewFile,BufFilePre,BufRead,BufWrite *.md set foldmethod=expr

" }}}

" Movement {{{

" Move vertically by visual line, allows to iterate over long wrapped lines
nnoremap j gj
nnoremap k gk

" }}}

" Encodings {{{

" Set default file encodings
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set fileencodings=utf-8,default,cp1251

" Allow changing encoding of the file on the fly
menu Encoding.koi8-r :e ++enc=koi8-r ++ff=unix<CR>
menu Encoding.windows-1251 :e ++enc=cp1251 ++ff=dos<CR>
menu Encoding.cp866 :e ++enc=cp866 ++ff=dos<CR>
menu Encoding.utf-8 :e ++enc=utf8 <CR>
menu Encoding.koi8-u :e ++enc=koi8-u ++ff=unix<CR>
map <F9> :emenu Encoding.<TAB>

" }}}

" Backup {{{

" Move backups to separate folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" }}}

" {{{ Buffers

" Dont replace text in buffer with just replaced text
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" }}}

" {{{ Abbreviations

abbr Include include

" }}}

" SingleCompile {{{

let g:SingleCompile_showquickfixiferror = 1
let g:SingleCompile_silentcompileifshowquickfix = 1

let g:SingleCompile_resultsize = 80
let g:SingleCompile_split = 'vsplit'

" Setup proper compile flags
let common_run_command = './$(FILE_TITLE)$.out'
let common_out_file = '$(FILE_TITLE)$.out'
let common_flags = '-O2 -std=c++0x -DHOME -I/Users/acid/Yandex.Disk.localized/Code -o ' . common_out_file
"let common_flags = '-O2 -std=c++0x -DHOME -I/Users/acid/Yandex.Disk.localized/Code -I/opt/X11/include -L/opt/X11/lib -lX11 -lm -lpthread -o ' . common_out_file

call SingleCompile#SetCompilerTemplate(
    \'cpp', 'clang', 'Clang', 'clang++-3.7', common_flags, common_run_command)
call SingleCompile#SetOutfile('cpp', 'clang', common_out_file)

call SingleCompile#SetCompilerTemplate(
    \'cpp', 'g++', 'GCC', 'g++-5', common_flags, common_run_command)
call SingleCompile#SetOutfile('gcc', 'g++', common_out_file)

" Use clang by default, otherwise fallback to g++
call SingleCompile#SetPriority('cpp', 'clang', 10)
call SingleCompile#SetPriority('cpp', 'g++', 20)

nmap <F5> :SCCompile<cr>
nmap <F6> :call AssembleFile()<cr>
nnoremap <silent> <leader>r :SCCompileRun<CR>

func! AssembleFile()
    :w
    !/Users/acid/Yandex.Disk.localized/Code/fugo/combine_headers.py % /Users/acid/Yandex.Disk.localized/Code > %<_full.cpp
endfunc

" }}}

" Syntastic {{{

" Basic syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Set passive mode by default
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
noremap <C-w>e :SyntasticCheck<CR>
noremap <C-w>f :SyntasticToggleMode<CR>

" }}}

" Autoformat {{{

noremap <F3> :Autoformat<CR>
let g:formatdef_autopep8 = "'autopep8 - --aggressive --max-line-length 80 --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['autopep8']

" }}}

" Vimwiki {{{

" Specify notes path and turn on syntax highlighting
let s:vimwiki = {}
let s:vimwiki.path="~/notes"
let s:vimwiki.nested_syntaxes={'python': 'python', 'bash': 'sh'}
let s:vimwiki.syntax="markdown"
let s:vimwiki.ext=".md"
let g:vimwiki_list = [s:vimwiki]

" Highlight headers with different colors
let g:vimwiki_hl_headers = 1

" Set folding mode
let g:vimwiki_folding = 'expr'

" }}}

" session.vim {{{

" Autosave session on exit and every 5 minutes
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5

" Load default session on vim start
let g:session_autoload = 'yes'

" Keybindings to quickly save and load sessions
nnoremap <Leader>os :OpenSession<cr>

" }}}

" FastFold {{{

" Don't update folds on saves
let g:fastfold_savehook = 0

" }}}

" {{{ deoplete

" Use deoplete.
let g:deoplete#enable_at_startup = 1
autocmd CompleteDone * pclose!

" }}}

" vim:foldmethod=marker:foldlevel=0
