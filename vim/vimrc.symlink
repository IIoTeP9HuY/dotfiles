" Plugins {{{

" Setup vim-plug:
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall 1 | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Visual-improvement plugins
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'bling/vim-airline'
Plug 'kien/rainbow_parentheses.vim'


" Code navigation plugins
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'justinmk/vim-sneak'

" Coding plugins
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'xuhdev/SingleCompile'
Plug 'fatih/vim-go'
Plug 'Konfekt/FastFold'
Plug 'rizzatti/dash.vim'
Plug 'ervandew/supertab'
Plug 'lervag/vimtex'
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
Plug 'SirVer/ultisnips'
Plug 'Chiel92/vim-autoformat'
Plug 'jgdavey/tslime.vim'

function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'zchee/deoplete-jedi'
Plug 'zchee/deoplete-clang'
Plug 'fishbullet/deoplete-ruby'

" Notes-organizing plugins
Plug 'akashin/vim-orgmode'
Plug 'tpope/vim-speeddating'
Plug 'vim-scripts/utl.vim'
Plug 'shime/vim-livedown'
Plug 'nathangrigg/vim-beancount'


" Taskwarrior plugins
if executable('task')
    Plug 'tbabej/taskwiki'
    Plug 'blindFS/vim-taskwarrior'
endif

" Other plugins
Plug 'tpope/vim-fugitive'
Plug 'terryma/vim-multiple-cursors'
Plug 'yssl/QFEnter'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'akashin/vim-plugins'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/YankRing.vim'

call plug#end()

set rtp+=~/.fzf

" }}}

" Colors {{{

syntax on
syntax enable
colorscheme badwolf

" Vimdiff color scheme
highlight DiffChange cterm=none ctermfg=black ctermbg=LightGreen gui=none guifg=bg guibg=LightGreen
highlight DiffText cterm=none ctermfg=black ctermbg=Red gui=none guifg=bg guibg=Red

" }}}

" Spaces and Tabs {{{

set tabstop=4
set shiftwidth=4
set expandtab       " Replace tabs with spaces
set autoindent
filetype plugin on
filetype plugin indent on   " Use language-dependent indentation

" }}}

" UI Config {{{

set number                  " Show line numbers
set cursorline              " Highlight current line
set showmatch               " Highlight matching parenthesis

set wildmenu                " Show visual autocomplete menu
set wildmode=longest,list
set wcm=<Tab>

set colorcolumn=100              " Display 100-characters border
set laststatus=2                 " Always display the status line
let g:airline_powerline_fonts=1  " Generate airline fonts

" Highlight spaces and tabs in the end of line
set list listchars=tab:>-,trail:.,precedes:<,extends:>
set list

set splitright     " `:vs filename` will open split on the right

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Fix random glitches on some terminals.
set guicursor=

" }}}

" Shortcuts {{{

let mapleader=","       " Rebind Leader from backslash to comma
let maplocalleader = ";" " Rebind local Leader form backslack to semicolon

" Fast search word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><cr>
" Fast search and replace word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
" Speedup copy and paste from global buffer
noremap <Leader>y "+y
vnoremap <Leader>y "+y
noremap <Leader>p "+p
" Save files faster
nnoremap <Leader>w :w<CR>

" Fix alt key usage in OSX terminals
if exists(':tnoremap')
    tnoremap Ã¥ <A-a>
endif

" Switch between panels with <Enter> key
nnoremap <cr> <c-w>w

" Leave insert mode with fd
inoremap fd <ESC>

" Disable autoindenting when pasting large chunk of code
set pastetoggle=<F2>

" Save write-protected file
cmap w!! %!sudo tee > /dev/null %

" Access fzf commands to search across files and buffers
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <Leader>b :Buffers<CR>

" Shortcut to open NERDTree drawer
map <silent> <Leader>e :NERDTreeToggle<CR>

" Select text that you've just pasted
noremap gV `[v`]

" Disable tmux navigator mappings by default
let g:tmux_navigator_no_mappings = 1

" Add manual tmux navigator mappings
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" Open diary for today.
let notes_path = "~/notes/"

function! GetTimeString(delta_days)
    return strftime('%Y-%m-%d', localtime() + a:delta_days * 60 * 60 * 24)
endfunction

function! OpenDiary(delta_days)
    :let diary_filename = g:notes_path . "diary/" . GetTimeString(a:delta_days) . ".org"
    :execute 'edit' diary_filename
endfunction

nnoremap <silent> <Leader>dd :call OpenDiary(0) <CR>
nnoremap <silent> <Leader>dy :call OpenDiary(-1) <CR>
nnoremap <silent> <Leader>dt :call OpenDiary(+1) <CR>

function! AddTodo()
    call inputsave()
    let name = input('Enter TODO: ')
    call inputrestore()
    call append(line('$'), "** TODO " . name)
endfun

" Open tasks.
nnoremap <silent> <Leader>tt :execute 'edit' notes_path . "tasks.org" <CR>
nnoremap <silent> <Leader>ti :execute 'edit' notes_path . "inbox.org" <CR>
nnoremap <silent> <Leader>ta :call AddTodo() <CR>

" }}}

" Search {{{

set incsearch " Search as characters are entered
set hlsearch  " Highlight current matches

" Turn off current highlighting
nnoremap <Leader>c :nohlsearch<CR>

" }}}

" Folding {{{

set foldenable          " Enable folding
set foldnestmax=10      " Open all folds on levels < 10

" Space opens/closes folds
nnoremap <space> za

" Set foldmethod to expr for markdown files
"autocmd BufNewFile,BufFilePre,BufRead,BufWrite *.md set foldmethod=expr
"autocmd BufNewFile,BufFilePre,BufRead,BufWrite *.org set foldmethod=expr

function PopulateDiaryTemplate()
    0r $HOME/.vim/UltiSnips/org.snippets
    :g/snippet/d
    0d
    0r !echo Diary for $(date +\%Y-\%m-\%d)
endfunction

autocmd BufNewFile 2017-*.org call PopulateDiaryTemplate()
autocmd BufNewFile 2018-*.org call PopulateDiaryTemplate()

" }}}

" Movement {{{

" Move vertically by visual line, allows to iterate over long wrapped lines
nnoremap j gj
nnoremap k gk

" }}}

" Encodings {{{

" Set default file encodings
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set fileencodings=utf-8,default,cp1251

" Allow changing encoding of the file on the fly
menu Encoding.koi8-r :e ++enc=koi8-r ++ff=unix<CR>
menu Encoding.windows-1251 :e ++enc=cp1251 ++ff=dos<CR>
menu Encoding.cp866 :e ++enc=cp866 ++ff=dos<CR>
menu Encoding.utf-8 :e ++enc=utf8 <CR>
menu Encoding.koi8-u :e ++enc=koi8-u ++ff=unix<CR>
map <F9> :emenu Encoding.<TAB>

" }}}

" Backup {{{

" Move backups to separate folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,/var/tmp,/tmp
set writebackup

" }}}

" {{{ Buffers

" Dont replace text in buffer with just replaced text
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Automatically open quickfix window after make.
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" }}}

" {{{ Abbreviations

abbr Include include

" }}}

" SingleCompile {{{

let g:SingleCompile_showquickfixiferror = 1
let g:SingleCompile_silentcompileifshowquickfix = 1

let g:SingleCompile_resultsize = 80
let g:SingleCompile_split = 'vsplit'

" Setup proper compile flags
let common_run_command = './$(FILE_TITLE)$.out'
let common_out_file = '$(FILE_TITLE)$.out'
let common_flags = '-O2 -std=c++1z -lstdc++fs -Wall -DHOME -I/Users/akashin/code -o ' . common_out_file

call SingleCompile#SetCompilerTemplate(
    \'cpp', 'clang', 'Clang', 'clang++', common_flags, common_run_command)
call SingleCompile#SetOutfile('cpp', 'clang', common_out_file)

call SingleCompile#SetCompilerTemplate(
    \'cpp', 'g++', 'GCC', 'g++-7', common_flags, common_run_command)
call SingleCompile#SetOutfile('gcc', 'g++', common_out_file)

" Use clang by default, otherwise fallback to g++
call SingleCompile#SetPriority('cpp', 'clang', 20)
call SingleCompile#SetPriority('cpp', 'g++-7', 10)

nmap <F5> :SCCompile<cr>
nmap <F6> :call AssembleFile()<cr>
nnoremap <silent> <Leader>r :SCCompileRun<CR>

func! AssembleFile()
    :w
    !/Users/akashin/code/fugo/combine_headers.py % /Users/akashin/code > %<_full.cpp
endfunc

" }}}

" Syntastic {{{

" Basic syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Set passive mode by default
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
noremap <C-w>e :SyntasticCheck<CR>
noremap <C-w>f :SyntasticToggleMode<CR>

" }}}

" Autoformat {{{

noremap <Leader>f :Autoformat<CR>

" General settings.
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

" Python formatting.
let g:formatdef_autopep8 = "'autopep8 - --aggressive --max-line-length 80 --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['yapf']

" C++ formatting.
let g:formatdef_c_autoformat = "'clang-format -lines='.a:firstline.':'.a:lastline.' --assume-filename=\"'.expand('%:p').'\" -style=\"{BasedOnStyle: Google}\"'"
let g:formatters_c = ['c_autoformat']

" }}}

" session.vim {{{

" Autosave session on exit and every 5 minutes
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 5

" Load default session on vim start
let g:session_autoload = 'yes'

" Keybindings to quickly save and load sessions
nnoremap <Leader>os :OpenSession<cr>

" }}}

" FastFold {{{

" Don't update folds on saves
let g:fastfold_savehook = 0

" }}}

" {{{ deoplete

" Use deoplete.
let g:deoplete#enable_at_startup = 1
autocmd CompleteDone * pclose!

let g:deoplete#sources#clang#libclang_path = "/usr/local/Cellar/llvm/3.9.1/lib/libclang.dylib"
let g:deoplete#sources#clang#clang_header = "/usr/local/Cellar/llvm/3.9.1/lib/clang/3.9.1"


" }}}

" {{{ vimtex

" Enable vimtex autocompletion.
let g:vimtex_complete_enabled = 1

" Enable integration with deoplete.
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif

let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete

" Use Skim as a default previewer.
" TODO: Make this OS dependent.
"let g:vimtex_view_general_viewer
      "\ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'

" }}}

" {{{ LimeLight

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" }}}

" {{{ OrgMode

" Save state of the folds for orgmode files
autocmd BufWinLeave *.org* mkview
autocmd BufWinEnter *.org* silent! loadview

" # Function to permanently delete views created by 'mkview'
function! MyDeleteView()
    let path = fnamemodify(bufname('%'),':p')
    " vim's odd =~ escaping for /
    let path = substitute(path, '=', '==', 'g')
    if empty($HOME)
    else
        let path = substitute(path, '^'.$HOME, '\~', '')
    endif
    let path = substitute(path, '/', '=+', 'g') . '='
    " view directory
    let path = &viewdir.'/'.path
    call delete(path)
    echo "Deleted: ".path
endfunction

" # Command Delview (and it's abbreviation 'delview')
command Delview call MyDeleteView()
" Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>

" Fix fold colors.
autocmd BufWinEnter *.org* highlight Folded ctermfg=137 guifg=#b88853

" Update inbox file.
autocmd BufWinEnter inbox.org exec MoveMobileInbox()

let g:org_agenda_files = ["~/notes/tasks.org", "~/notes/refile.org"]
" Hide style markers, e.g. bold.
"let g:org_aggressive_conceal = 1
let g:org_todo_keywords = ['TODO(t)', 'NEXT(n)', '|', 'DONE(d)', 'WAITING(w)']

"let g:org_indent = 1

" }}}

" {{{ UltiSnips

" Trigger configuration.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" }}}

" {{{ YankRing

let g:yankring_history_file = '.yankring-history'
nnoremap <Leader>yr :YRShow<CR>
nnoremap <C-y> :YRShow<CR>
let g:yankring_replace_n_pkey = ''

" }}}

" {{{ tslime.vim

" Ensure that at least one newline is present at the end of any text sent to tmux.
" Without this, code will be sent to the REPL, but not executed until you switch
" to the REPL pane and hit enter.
let g:tslime_ensure_trailing_newlines = 1

" Init default keybindings.
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

" }}}

" {{{ rainbow_parentheses.vim

au VimEnter * RainbowParenthesesToggle

" }}}

let work_vimrc = $HOME."/.vimrc.work"
if filereadable(work_vimrc)
    :execute 'source '.fnameescape(work_vimrc)
endif

" vim:foldmethod=marker:foldlevel=0
